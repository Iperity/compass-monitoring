#!/usr/bin/env python2

import os
from munin import MuninPlugin
from KamailioRpc import KamailioRpc


class KamailioShmemFragmentsPlugin(MuninPlugin):
    args = "-l 0"
    vlabel = "fragments"
    scale = True
    category = "kamailio"
    lines = ['fragments']

    def __init__(self, instance_name, host, port):
        self.instance_name = instance_name
        self.title = self.instance_name.title() + " Shmem Fragments"
        self.rpc = KamailioRpc(host, port)
        super(MuninPlugin, self).__init__()

    @property
    def fields(self):
        fields = []
        for type in self.lines:
            opts = dict(
                label = type,
                draw = 'LINE2',
                type = "GAUGE",
                min = "0"
            )
            fields.append( (type, opts ))
        return fields

    def autoconf(self):
        return True

    def execute(self):
        data = self.get_stats()
        result = dict()
        for type in self.lines:
            result[type] = data['shmem:' + type]
        return result

    def get_stats(self):
        output = self.rpc.send_rpc('stats.get_statistics', ['all'])
        return self.rpc.parse_key_values(output['result'])

    def debug(self, str):
        print(str)

if __name__ == "__main__":
    name_parts = os.path.basename(__file__).split('_')
    kamailio_type = name_parts[-1]
    host = 'localhost'
    if 'kamailio_host' in os.environ:
        host = os.environ['kamailio_host']
    port = int(os.environ['kamailio_rpc_port'])
    KamailioShmemFragmentsPlugin(kamailio_type, host, port).run()
